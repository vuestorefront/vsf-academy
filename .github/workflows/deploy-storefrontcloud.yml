name: Deploy to Storefrontcloud
on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CONTENTFUL_TOKEN: ${{ secrets.CONTENTFUL_TOKEN }}
      CONTENTFUL_SPACE: ${{ secrets.CONTENTFUL_SPACE }}
      COMMERCETOOLS_URI: ${{ secrets.COMMERCETOOLS_URI }}
      COMMERCETOOLS_FACETING_URI: ${{ secrets.COMMERCETOOLS_FACETING_URI }}
      COMMERCETOOLS_AUTH_HOST: ${{ secrets.COMMERCETOOLS_AUTH_HOST }}
      COMMERCETOOLS_PROJECT_KEY: ${{ secrets.COMMERCETOOLS_PROJECT_KEY }}
      COMMERCETOOLS_CLIENT_ID: ${{ secrets.COMMERCETOOLS_CLIENT_ID }}
      COMMERCETOOLS_CLIENT_SECRET: ${{ secrets.COMMERCETOOLS_CLIENT_SECRET }}
      COMMERCETOOLS_COUNTRY: ${{ secrets.COMMERCETOOLS_COUNTRY }}
      COMMERCETOOLS_CURRENCY: ${{ secrets.COMMERCETOOLS_CURRENCY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Generate CommerceTools
        run: |
          npm install -g npm-cli-login
          npm-cli-login -u ${{ secrets.CLOUD_USERNAME }} -p ${{ secrets.CLOUD_PASSWORD }} -e ${{ secrets.NPM_EMAIL }} -r https://registrynpm.storefrontcloud.io
          yarn install
          yarn vsf-tu --config cli-config.js --et:name demo --et:commerce commercetools --et:payment adyen --et:cms contentful
      - name: Build and publish docker image
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: demo-enterprise-storefrontcloud-io/vue-storefront:${{ github.sha }}
          registry: registry.vuestorefront.cloud
          username: ${{ secrets.CLOUD_USERNAME }}
          password: ${{ secrets.CLOUD_PASSWORD }}
          dockerfile: .vuestorefrontcloud/docker/Dockerfile
          buildoptions: "--compress"
          buildargs: NPM_EMAIL,NPM_PASS,NPM_USER,NPM_REGISTRY
        env:
          NPM_EMAIL: ${{ secrets.NPM_EMAIL }}
          NPM_PASS: ${{ secrets.CLOUD_PASSWORD }}
          NPM_USER: ${{ secrets.CLOUD_USERNAME }}
          NPM_REGISTRY: "https://registrynpm.storefrontcloud.io"
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          target_url: https://demo-enterprise.europe-west1.gcp.storefrontcloud.io
          environment: production
          initial_status: in_progress
      - name: Deploy on demo-enterprise.europe-west1.gcp.storefrontcloud.io
        if: github.ref == 'refs/heads/main'
        run: |
          if curl -s -H 'X-User-Id: ${{ secrets.CLOUD_USERNAME }}'  -H 'X-Api-Key: ${{ secrets.CLOUD_PASSWORD }}' -H 'Content-Type: application/json' -X POST -d '{"code":"demo-enterprise","region":"europe-west1.gcp","frontContainerVersion":"${{ github.sha }}"}' https://farmer.storefrontcloud.io/instances | grep -q '{"code":200,"result":"Instance updated!"}'; then
            echo "Instance updated"
          else
            echo "Something went wrong during the update process..."
            exit 1
          fi
      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: https://demo-enterprise.europe-west1.gcp.storefrontcloud.io
          state: "success"
          description: Congratulations! The deploy is done.
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: https://demo-enterprise.europe-west1.gcp.storefrontcloud.io
          description: Unfortunately, the instance hasn't been updated.
          state: "failure"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
