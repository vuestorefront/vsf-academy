<template>
  <div>
    <SfHeader
      data-cy="app-header"
      class="sf-header--has-mobile-search"
      :class="{ 'header-on-top': isSearchOpen }"
      :isNavVisible="isMobileMenuOpen"
    >
      <!-- TODO: add mobile view buttons after SFUI team PR -->
      <template #logo>
        <nuxt-link
          data-cy="app-header-url_logo"
          :to="localePath('/')"
          class="sf-header__logo"
        >
          <SfImage
            :src="logo.url"
            alt="Vue Storefront Next"
            class="sf-header__logo-image"
          />
        </nuxt-link>
      </template>
      <template #navigation>
        <div class="desktop-only navigation-wrapper">
          <SfHeaderNavigationItem
            v-for="item in navigation"
            :key="item.caption"
            class="nav-item"
            :label="item.caption"
            :link="localePath(item.link)"
          />
        </div>
        <SfModal class="smartphone-only" :visible="isMobileMenuOpen">
          <SfHeaderNavigationItem
            v-for="item in navigation"
            :key="item.caption"
            class="nav-item"
            :label="item.caption"
            @click.native="navigate(localePath(item.link))"
          />
        </SfModal>
      </template>
      <template #aside>
        <LocaleSelector class="smartphone-only" />
      </template>
      <template #header-icons>
        <div class="sf-header__icons">
          <SfButton
            class="sf-button--pure sf-header__action"
            @click="handleAccountClick"
          >
            <SfIcon :icon="accountIcon" size="1.25rem" />
          </SfButton>
          <SfButton
            class="sf-button--pure sf-header__action"
            @click="toggleWishlistSidebar"
          >
            <SfIcon
              class="sf-header__icon"
              :icon="wishlistIcon"
              size="1.25rem"
            />
            <SfBadge v-if="wishlistTotalItems" class="sf-badge--number cart-badge">{{wishlistTotalItems}}</SfBadge>
          </SfButton>
          <SfButton
            class="sf-button--pure sf-header__action"
            @click="toggleCartSidebar"
          >
            <SfIcon class="sf-header__icon" icon="empty_cart" size="1.25rem" />
            <SfBadge
              v-if="cartTotalItems"
              class="sf-badge--number cart-badge"
              >{{ cartTotalItems }}</SfBadge
            >
          </SfButton>
        </div>
      </template>
      <template #search>
        <SfSearchBar
          ref="searchBarRef"
          :placeholder="search_placeholder"
          aria-label="Search"
          class="sf-header__search"
          :value="term"
          @input="handleSearch"
          @keydown.enter="handleSearch($event)"
          @focus="isSearchOpen = true"
          @keydown.esc="closeSearch"
          v-click-outside="closeSearch"
        >
          <template #icon>
            <SfButton
              v-if="!!term"
              class="sf-search-bar__button sf-button--pure"
              @click="closeOrFocusSearchBar"
            >
              <span class="sf-search-bar__icon">
                <SfIcon color="var(--c-text)" size="18px" icon="cross" />
              </span>
            </SfButton>
            <SfButton
              v-else
              class="sf-search-bar__button sf-button--pure"
              @click="
                isSearchOpen ? (isSearchOpen = false) : (isSearchOpen = true)
              "
            >
              <span class="sf-search-bar__icon">
                <SfIcon color="var(--c-text)" size="20px" icon="search" />
              </span>
            </SfButton>
          </template>
        </SfSearchBar>
      </template>
    </SfHeader>
    <SearchResults
      :visible="isSearchOpen"
      :result="result"
      :term="term"
      @close="closeSearch"
    />
    <SfOverlay :visible="isSearchOpen" />
  </div>
</template>

<script>
import {
  SfHeader,
  SfImage,
  SfIcon,
  SfButton,
  SfBadge,
  SfSearchBar,
  SfOverlay,
  SfModal
} from '@storefront-ui/vue'
import { useUiState } from '~/composables'
import {
  useCart,
  useWishlist,
  useUser,
  cartGetters,
  useFacet,
  wishlistGetters
} from '@vsf-enterprise/commercetools'
import { computed, ref, onBeforeUnmount, watch } from '@vue/composition-api'
import { onSSR } from '@vue-storefront/core'
import { useUiHelpers } from '~/composables'
import LocaleSelector from '~/components/LocaleSelector'
import SearchResults from '~/components/SearchResults'
import { clickOutside } from '@storefront-ui/vue/src/utilities/directives/click-outside/click-outside-directive.js'
import {
  mapMobileObserver,
  unMapMobileObserver,
} from '@storefront-ui/vue/src/utilities/mobile-observer.js'
import debounce from 'lodash.debounce'

export default {
  components: {
    SfHeader,
    SfImage,
    LocaleSelector,
    SfIcon,
    SfButton,
    SfBadge,
    SfSearchBar,
    SearchResults,
    SfOverlay,
    SfModal
  },
  props: {
    logo: Object,
    navigation: Array,
    search_placeholder: String,
  },
  directives: { clickOutside },
  setup(props, { root }) {
    const { toggleCartSidebar, toggleWishlistSidebar, toggleLoginModal, isMobileMenuOpen, toggleMobileMenu } =
      useUiState()
    const { getFacetsFromURL } =
      useUiHelpers()
    const { result, search } = useFacet('search');
    const { isAuthenticated, load: loadUser } = useUser()
    const { cart, load: loadCart } = useCart()
    const { load: loadWishlist, wishlist } = useWishlist()
    const term = ref(getFacetsFromURL().term)
    const isSearchOpen = ref(false)
    const searchBarRef = ref(null)

    const cartTotalItems = computed(() => {
      const count = cartGetters.getTotalItems(cart.value)
      return count ? count.toString() : null
    })

    const wishlistTotalItems = computed(() => {
      const count = wishlistGetters.getTotalItems(wishlist.value);
      return count ? count.toString() : null;
    });

    const accountIcon = computed(() =>
      isAuthenticated.value ? 'profile_fill' : 'profile',
    )

    const wishlistIcon = computed(() =>
      wishlistGetters.getTotalItems(wishlist.value) ? 'heart_fill' : 'heart',
    )

    // TODO: https://github.com/DivanteLtd/vue-storefront/issues/4927
    const handleAccountClick = async () => {
      if (isAuthenticated.value) {
        const localeAccountPath = root.localePath({ name: 'my-account' });
        return root.$router.push(localeAccountPath);
      }

      toggleLoginModal()
    }

    onSSR(async () => {
      await loadUser()
      await loadCart()
      await loadWishlist()
    })

    const closeSearch = () => {
      const wishlistClassName = 'sf-product-card__wishlist-icon';
      const isWishlistIconClicked = event.path.find(p => wishlistClassName.search(p.className) > 0);
      if (isWishlistIconClicked || !isSearchOpen.value) return;
      term.value = '';
      isSearchOpen.value = false;
    };

    const handleSearch = debounce(async (paramValue) => {
      term.value =  paramValue.target?.value || paramValue;
      await search({ filters: {}, page: 1, itemsPerPage: 20, sort: 'latest', phrase: term.value });
    }, 1000);

    const isMobile = computed(() => mapMobileObserver().isMobile.get())

    const closeOrFocusSearchBar = () => {
      if (isMobile.value) {
        return closeSearch()
      } else {
        term.value = ''
        return searchBarRef.value.$el.children[0].focus()
      }
    }

    const navigate = (to) => {
      root.$router.push(to);
      toggleMobileMenu();
    }

    watch(
      () => term.value,
      (newVal, oldVal) => {
        const shouldSearchBeOpened =
          !isMobile.value &&
          term.value.length > 0 &&
          ((!oldVal && newVal) ||
            (newVal.length !== oldVal.length && isSearchOpen.value === false))
        if (shouldSearchBeOpened) {
          isSearchOpen.value = true
        }
      },
    )

    onBeforeUnmount(() => {
      unMapMobileObserver()
    })

    return {
      accountIcon,
      wishlistIcon,
      cartTotalItems,
      wishlistTotalItems,
      handleAccountClick,
      toggleCartSidebar,
      toggleWishlistSidebar,
      term,
      isSearchOpen,
      closeSearch,
      handleSearch,
      result,
      closeOrFocusSearchBar,
      searchBarRef,
      isMobile,
      isMobileMenuOpen,
      navigate
    }
  },
}
</script>

<style lang="scss" scoped>
.sf-header {
  --header-padding: var(--spacer-sm);
  @include for-desktop {
    --header-padding: 0;
  }
  &__logo-image {
    height: 100%;
  }
}
.header-on-top {
  z-index: 2;
}
.nav-item {
  --header-navigation-item-margin: 0 var(--spacer-base);
}

.cart-badge {
  position: absolute;
  bottom: 40%;
  left: 40%;
}

.navigation-wrapper {
  @include for-desktop {
    display: flex;
  }
  white-space: nowrap;
}

.sf-header-navigation-item {
  ::v-deep &__item--mobile {
    display: block;
  }
}
.sf-modal {
  ::v-deep &__bar {
    display: none;
  }
  ::v-deep &__content {
    padding: var(--modal-content-padding, var(--spacer-base) 0);
  }
}
</style>
